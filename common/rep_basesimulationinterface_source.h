#ifndef REP_BASESIMULATIONINTERFACE_SOURCE_H
#define REP_BASESIMULATIONINTERFACE_SOURCE_H

// This is an autogenerated file.
// Do not edit this file, any changes made will be lost the next time it is generated.

#include <QtCore/qobject.h>
#include <QtCore/qdatastream.h>
#include <QtCore/qvariant.h>
#include <QtCore/qmetatype.h>

#include <QtRemoteObjects/qremoteobjectnode.h>
#include <QtRemoteObjects/qremoteobjectsource.h>

#include "basictypes.h"

class BaseSimulationInterfaceSource : public QObject
{
    Q_OBJECT
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_TYPE, "BaseSimulationInterface")
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_SIGNATURE, "bf23fd386662b4561725f7ad186abbcb20209c3d")

public:
    explicit BaseSimulationInterfaceSource(QObject *parent = nullptr) : QObject(parent)
    {
        qRegisterMetaType<RectDimensionsType>();
        qRegisterMetaTypeStreamOperators<RectDimensionsType>();
        qRegisterMetaType<PositionType>();
        qRegisterMetaTypeStreamOperators<PositionType>();
        qRegisterMetaType<DisplayableObjectType>();
        qRegisterMetaTypeStreamOperators<DisplayableObjectType>();

    }

public:
    virtual ~BaseSimulationInterfaceSource() {}


Q_SIGNALS:
    void clearReqFwd();
    void addObjectReqFwd(const int __repc_variable_1, const DisplayableObjectType __repc_variable_2);
    void deleteObjectReqFwd(const int __repc_variable_1);
    void updateObjectPositionReqFwd(const int __repc_variable_1, const PositionType __repc_variable_2);
    void situationRectDimensionsReqFwd();
    void situationRectDimensionsInfoFwd(const RectDimensionsType __repc_variable_1);
    void cannotAddObjectFwd(const int __repc_variable_1);
    void cannotDeleteObjectFwd(const int __repc_variable_1);
    void cannotUpdateObjectPositionFwd(const int __repc_variable_1);
    void simulationFinishedFwd();

public Q_SLOTS:
    virtual void clearReqReemit() = 0;
    virtual void addObjectReqReemit(const int __repc_variable_1, const DisplayableObjectType __repc_variable_2) = 0;
    virtual void deleteObjectReqReemit(const int __repc_variable_1) = 0;
    virtual void updateObjectPositionReqReemit(const int __repc_variable_1, const PositionType __repc_variable_2) = 0;
    virtual void situationRectDimensionsReqReemit() = 0;
    virtual void situationRectDimensionsInfoReemit(const RectDimensionsType __repc_variable_1) = 0;
    virtual void cannotAddObjectReemit(const int __repc_variable_1) = 0;
    virtual void cannotDeleteObjectReemit(const int __repc_variable_1) = 0;
    virtual void cannotUpdateObjectPositionReemit(const int __repc_variable_1) = 0;
    virtual void simulationFinishedReemit() = 0;

private:
    friend class QT_PREPEND_NAMESPACE(QRemoteObjectNode);
};

#if (QT_VERSION < QT_VERSION_CHECK(5, 5, 0))
#endif


class BaseSimulationInterfaceSimpleSource : public BaseSimulationInterfaceSource
{
    Q_OBJECT

public:
    explicit BaseSimulationInterfaceSimpleSource(QObject *parent = nullptr) : BaseSimulationInterfaceSource(parent)
    {
    }

public:
    virtual ~BaseSimulationInterfaceSimpleSource() {}


private:
};


template <class ObjectType>
struct BaseSimulationInterfaceSourceAPI : public SourceApiMap
{
    BaseSimulationInterfaceSourceAPI(ObjectType *object, const QString &name = QStringLiteral("BaseSimulationInterface"))
        : SourceApiMap(), m_name(name)
    {
        Q_UNUSED(object);
        m_enums[0] = 0;
        m_properties[0] = 0;
        m_signals[0] = 10;
        m_signals[1] = QtPrivate::qtro_signal_index<ObjectType>(&ObjectType::clearReqFwd, static_cast<void (QObject::*)()>(0),m_signalArgCount+0,&m_signalArgTypes[0]);
        m_signals[2] = QtPrivate::qtro_signal_index<ObjectType>(&ObjectType::addObjectReqFwd, static_cast<void (QObject::*)(int,DisplayableObjectType)>(0),m_signalArgCount+1,&m_signalArgTypes[1]);
        m_signals[3] = QtPrivate::qtro_signal_index<ObjectType>(&ObjectType::deleteObjectReqFwd, static_cast<void (QObject::*)(int)>(0),m_signalArgCount+2,&m_signalArgTypes[2]);
        m_signals[4] = QtPrivate::qtro_signal_index<ObjectType>(&ObjectType::updateObjectPositionReqFwd, static_cast<void (QObject::*)(int,PositionType)>(0),m_signalArgCount+3,&m_signalArgTypes[3]);
        m_signals[5] = QtPrivate::qtro_signal_index<ObjectType>(&ObjectType::situationRectDimensionsReqFwd, static_cast<void (QObject::*)()>(0),m_signalArgCount+4,&m_signalArgTypes[4]);
        m_signals[6] = QtPrivate::qtro_signal_index<ObjectType>(&ObjectType::situationRectDimensionsInfoFwd, static_cast<void (QObject::*)(RectDimensionsType)>(0),m_signalArgCount+5,&m_signalArgTypes[5]);
        m_signals[7] = QtPrivate::qtro_signal_index<ObjectType>(&ObjectType::cannotAddObjectFwd, static_cast<void (QObject::*)(int)>(0),m_signalArgCount+6,&m_signalArgTypes[6]);
        m_signals[8] = QtPrivate::qtro_signal_index<ObjectType>(&ObjectType::cannotDeleteObjectFwd, static_cast<void (QObject::*)(int)>(0),m_signalArgCount+7,&m_signalArgTypes[7]);
        m_signals[9] = QtPrivate::qtro_signal_index<ObjectType>(&ObjectType::cannotUpdateObjectPositionFwd, static_cast<void (QObject::*)(int)>(0),m_signalArgCount+8,&m_signalArgTypes[8]);
        m_signals[10] = QtPrivate::qtro_signal_index<ObjectType>(&ObjectType::simulationFinishedFwd, static_cast<void (QObject::*)()>(0),m_signalArgCount+9,&m_signalArgTypes[9]);
        m_methods[0] = 10;
        m_methods[1] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::clearReqReemit, static_cast<void (QObject::*)()>(0),"clearReqReemit()",m_methodArgCount+0,&m_methodArgTypes[0]);
        m_methods[2] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::addObjectReqReemit, static_cast<void (QObject::*)(int,DisplayableObjectType)>(0),"addObjectReqReemit(int,DisplayableObjectType)",m_methodArgCount+1,&m_methodArgTypes[1]);
        m_methods[3] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::deleteObjectReqReemit, static_cast<void (QObject::*)(int)>(0),"deleteObjectReqReemit(int)",m_methodArgCount+2,&m_methodArgTypes[2]);
        m_methods[4] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::updateObjectPositionReqReemit, static_cast<void (QObject::*)(int,PositionType)>(0),"updateObjectPositionReqReemit(int,PositionType)",m_methodArgCount+3,&m_methodArgTypes[3]);
        m_methods[5] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::situationRectDimensionsReqReemit, static_cast<void (QObject::*)()>(0),"situationRectDimensionsReqReemit()",m_methodArgCount+4,&m_methodArgTypes[4]);
        m_methods[6] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::situationRectDimensionsInfoReemit, static_cast<void (QObject::*)(RectDimensionsType)>(0),"situationRectDimensionsInfoReemit(RectDimensionsType)",m_methodArgCount+5,&m_methodArgTypes[5]);
        m_methods[7] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::cannotAddObjectReemit, static_cast<void (QObject::*)(int)>(0),"cannotAddObjectReemit(int)",m_methodArgCount+6,&m_methodArgTypes[6]);
        m_methods[8] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::cannotDeleteObjectReemit, static_cast<void (QObject::*)(int)>(0),"cannotDeleteObjectReemit(int)",m_methodArgCount+7,&m_methodArgTypes[7]);
        m_methods[9] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::cannotUpdateObjectPositionReemit, static_cast<void (QObject::*)(int)>(0),"cannotUpdateObjectPositionReemit(int)",m_methodArgCount+8,&m_methodArgTypes[8]);
        m_methods[10] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::simulationFinishedReemit, static_cast<void (QObject::*)()>(0),"simulationFinishedReemit()",m_methodArgCount+9,&m_methodArgTypes[9]);
    }

    QString name() const override { return m_name; }
    QString typeName() const override { return QStringLiteral("BaseSimulationInterface"); }
    int enumCount() const override { return m_enums[0]; }
    int propertyCount() const override { return m_properties[0]; }
    int signalCount() const override { return m_signals[0]; }
    int methodCount() const override { return m_methods[0]; }
    int sourceEnumIndex(int index) const override
    {
        if (index < 0 || index >= m_enums[0])
            return -1;
        return m_enums[index+1];
    }
    int sourcePropertyIndex(int index) const override
    {
        if (index < 0 || index >= m_properties[0])
            return -1;
        return m_properties[index+1];
    }
    int sourceSignalIndex(int index) const override
    {
        if (index < 0 || index >= m_signals[0])
            return -1;
        return m_signals[index+1];
    }
    int sourceMethodIndex(int index) const override
    {
        if (index < 0 || index >= m_methods[0])
            return -1;
        return m_methods[index+1];
    }
    int signalParameterCount(int index) const override
    {
        if (index < 0 || index >= m_signals[0])
            return -1;
        return m_signalArgCount[index];
    }
    int signalParameterType(int sigIndex, int paramIndex) const override
    {
        if (sigIndex < 0 || sigIndex >= m_signals[0] || paramIndex < 0 || paramIndex >= m_signalArgCount[sigIndex])
            return -1;
        return m_signalArgTypes[sigIndex][paramIndex];
    }
    int methodParameterCount(int index) const override
    {
        if (index < 0 || index >= m_methods[0])
            return -1;
        return m_methodArgCount[index];
    }
    int methodParameterType(int methodIndex, int paramIndex) const override
    {
        if (methodIndex < 0 || methodIndex >= m_methods[0] || paramIndex < 0 || paramIndex >= m_methodArgCount[methodIndex])
            return -1;
        return m_methodArgTypes[methodIndex][paramIndex];
    }
    int propertyIndexFromSignal(int index) const override
    {
        Q_UNUSED(index);
        return -1;
    }
    int propertyRawIndexFromSignal(int index) const override
    {
        Q_UNUSED(index);
        return -1;
    }
    const QByteArray signalSignature(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("clearReqFwd()");
        case 1: return QByteArrayLiteral("addObjectReqFwd(int,DisplayableObjectType)");
        case 2: return QByteArrayLiteral("deleteObjectReqFwd(int)");
        case 3: return QByteArrayLiteral("updateObjectPositionReqFwd(int,PositionType)");
        case 4: return QByteArrayLiteral("situationRectDimensionsReqFwd()");
        case 5: return QByteArrayLiteral("situationRectDimensionsInfoFwd(RectDimensionsType)");
        case 6: return QByteArrayLiteral("cannotAddObjectFwd(int)");
        case 7: return QByteArrayLiteral("cannotDeleteObjectFwd(int)");
        case 8: return QByteArrayLiteral("cannotUpdateObjectPositionFwd(int)");
        case 9: return QByteArrayLiteral("simulationFinishedFwd()");
        }
        return QByteArrayLiteral("");
    }
    QList<QByteArray> signalParameterNames(int index) const override
    {
        if (index < 0 || index >= m_signals[0])
            return QList<QByteArray>();
        return ObjectType::staticMetaObject.method(m_signals[index + 1]).parameterNames();
    }
    const QByteArray methodSignature(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("clearReqReemit()");
        case 1: return QByteArrayLiteral("addObjectReqReemit(int,DisplayableObjectType)");
        case 2: return QByteArrayLiteral("deleteObjectReqReemit(int)");
        case 3: return QByteArrayLiteral("updateObjectPositionReqReemit(int,PositionType)");
        case 4: return QByteArrayLiteral("situationRectDimensionsReqReemit()");
        case 5: return QByteArrayLiteral("situationRectDimensionsInfoReemit(RectDimensionsType)");
        case 6: return QByteArrayLiteral("cannotAddObjectReemit(int)");
        case 7: return QByteArrayLiteral("cannotDeleteObjectReemit(int)");
        case 8: return QByteArrayLiteral("cannotUpdateObjectPositionReemit(int)");
        case 9: return QByteArrayLiteral("simulationFinishedReemit()");
        }
        return QByteArrayLiteral("");
    }
    QMetaMethod::MethodType methodType(int) const override
    {
        return QMetaMethod::Slot;
    }
    QList<QByteArray> methodParameterNames(int index) const override
    {
        if (index < 0 || index >= m_methods[0])
            return QList<QByteArray>();
        return ObjectType::staticMetaObject.method(m_methods[index + 1]).parameterNames();
    }
    const QByteArray typeName(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("void");
        case 1: return QByteArrayLiteral("void");
        case 2: return QByteArrayLiteral("void");
        case 3: return QByteArrayLiteral("void");
        case 4: return QByteArrayLiteral("void");
        case 5: return QByteArrayLiteral("void");
        case 6: return QByteArrayLiteral("void");
        case 7: return QByteArrayLiteral("void");
        case 8: return QByteArrayLiteral("void");
        case 9: return QByteArrayLiteral("void");
        }
        return QByteArrayLiteral("");
    }
    QByteArray objectSignature() const override { return QByteArray{"bf23fd386662b4561725f7ad186abbcb20209c3d"}; }

    int m_enums[1];
    int m_properties[1];
    int m_signals[11];
    int m_methods[11];
    const QString m_name;
    int m_signalArgCount[10];
    const int* m_signalArgTypes[10];
    int m_methodArgCount[10];
    const int* m_methodArgTypes[10];
};

QT_BEGIN_NAMESPACE
QT_END_NAMESPACE


#endif // REP_BASESIMULATIONINTERFACE_SOURCE_H
