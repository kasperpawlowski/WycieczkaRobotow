#ifndef SIMULATIONINTERFACE_H
#define SIMULATIONINTERFACE_H

#include "situationscene.h"
#include "rep_basesimulationinterface_source.h"

/*!
 * \brief The SimulationInterface class lies between GUI and a custom simulation
 *        for information exchange
 *
 * The class derives from autogenerated BaseSimulationInterfaceSource class.
 * BaseSimulationInterfaceSource class uses Qt Remote Object (QtRO) concept which
 * is an inter-process communication (IPC) module developed for Qt. It has been
 * autogenerated by a Qt Remote Object Compiler from basesimulationinterface.rep
 * \sa https://doc.qt.io/qt-5/qtremoteobjects-gettingstarted.html
 *
 * SimulationInterface is responsible for connecting its appropriate signals/slots
 * to appropriate signals/slots of provided SituationScene object (which serves as
 * a scene on which simulation objects will be displayed). All the public slots
 * simply act as signals reemiters.
 */
class SimulationInterface : public BaseSimulationInterfaceSource
{
    Q_OBJECT
public:
    /*!
     * \brief SimulationInterface constructs a new SimulationInterface
     * \param[in] situation the scene where the objects will be displayed on
     * \param[in] parent a parent widget
     */
    SimulationInterface(const SituationScene *const situation, QObject *parent = nullptr);

    /*!
     * \brief SimulationInterface destructs the SimulationInterface
     */
    ~SimulationInterface() {}

public slots:
    /*!
     * \brief clearReqReemit reemits a clear request signal connected to
     *        the appropriate slot of the scene
     */
    virtual void clearReqReemit();

    /*!
     * \brief addObjectReqReemit reemits an add object request signal connected to
     *        the appropriate slot of the scene
     * \param[in] id an identifier of an object
     * \param[in] obj the object being added
     */
    virtual void addObjectReqReemit(const int id, const DisplayableObjectType obj);

    /*!
     * \brief deleteObjectReqReemit reemits a delete object signal connected to
     *        the appropriate slot of the scene
     * \param[in] id an identifier of an object
     */
    virtual void deleteObjectReqReemit(const int id);

    /*!
     * \brief updateObjectPositionReqReemit reemits an update object position signal
     *        connected to the appropriate slot of the scene
     * \param[in] id an identifier of an object
     * \param[in] pos position of the object being updated
     */
    virtual void updateObjectPositionReqReemit(const int id, const PositionType pos);

    /*!
     * \brief situationRectDimensionsReqReemit reemits a situation rectangle dimensions
     *        request signal connected to the appropriate slot of the scene
     */
    virtual void situationRectDimensionsReqReemit();

    /*!
     * \brief situationRectDimensionsInfoReemit reemits a situation dimensions rectangle
     *        info request signal that should be connected to the appropriate slot of the
     *        custom simulation
     * \param[in] rect dimensions of the situation rectangle
     */
    virtual void situationRectDimensionsInfoReemit(const RectDimentionsType rect);

    /*!
     * \brief cannotAddObjectReemit reemits a cannot add object signal that should be
     *        connected to the appropriate slot of the custom simulation
     * \param[in] id an identifier of an object
     */
    virtual void cannotAddObjectReemit(const int id);

    /*!
     * \brief cannotDeleteObjectReemit reemits a cannot delete object signal that should be
     *        connected to the appropriate slot of the custom simulation
     * \param[in] id an identifier of an object
     */
    virtual void cannotDeleteObjectReemit(const int id);

    /*!
     * \brief cannotUpdateObjectPositionReemit reemits a cannot update object position signal
     *        that should be connected to the appropriate slot of the custom simulation
     * \param[in] id an identifier of an object
     */
    virtual void cannotUpdateObjectPositionReemit(const int id);

    /*!
     * \brief simulationFinishedReemit reemits a simulation finished signal that should be
     *        sent when the simulation is finished
     */
    virtual void simulationFinishedReemit();

private:
    SimulationInterface() = delete;
};

#endif // SIMULATIONINTERFACE_H
